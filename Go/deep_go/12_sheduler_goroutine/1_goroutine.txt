
	Context Switching.
	------------------

Context switching --- это когда есть потоки операционной системы,
и их кто то переключает. Этим занимается ядро операционной системы.
Что протсходит?
1. Вытесняется поток который сейчас исполняется.
2. Происходит звонок в ядро - начинает выполняться поток ядра операционной системы,
	то есть шедулер который выбирает следующий поток.
3. После выбора потока - он на него переключается.
	Получается 2 contyext switching:
		1. Переключиться на поток ядра операционной системы,
		2. Переключиться на выбранный поток.
4. 

// ===========================================

	Goroutine.
	----------

Зачем переключаться в ядро операционной системы (кэши вымываются)
делать переключение в ядро и обратно.

Концепция --- переключением горутин занимается не ядро операционной системы,
	а пользовательское приложение.

	Ключевые идеи.
	--------------

1. Не даем в руки программисту поток.
2. Делаем вид, что есть только горутины.
3. Все сложность распределения горутин абстрагируеи.

	Check number goriutine.
runtime.NumGoroutine()

// ===========================================
	
	Когда срабатывает паника, она долетает до верхушки стека горутины,
процесс горутины крашиться. 
Поэтому надо на верхушке стека горутины перехватывать панику,
чтоб не дойти до main горутины и не положить приложение полностью,
если работают еще остальные горутины - они продолжат работу,
а горутина с паникой будет перехвачена.

// ===========================================

	Стек горутины может расти.
	--------------------------

Начинается с 2 килобайтов.

На 64 битных системах --- до 1 гигабайта
На 32 битных системах --- до 512 мбайт

// ===========================================
