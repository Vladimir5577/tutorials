Каналы нужны для связи с горутинами.

Каналы --- примитивы, в которые можно писать и из которых можно читать.

	- блокируют / разблокирубт горутины
	- работают с конкретным типом
	- похожи на очередь FIFO
	- goroutine-safe


Канал --- это указатель на структуру.

Закрывать канал --- должен кто создал.
Или канал закрывает тот кто пишет.
Писатель закрывает канал, т.к знает что туда уже нечего писать.


Из канала можем прочитать 2 значения,
первое это само значение,
второе флаг bool - закрыт канал или открыт.

value, opened := <-ch
if opened {
	// channel is opened
}

// ===============================================

Можем проверить размер и емкость.

len(ch) // колво элементов в буфере
cap(ch) // размер буфера


// ===============================================

Буфер небуферизированного канала = 0.

// ===============================================


1. Запись в nil канал 		- deadlock
   Чтение из nil канала 	- deadlock
   Закрытие nil канала 		- panic
   Закрытие закрытого канала - panic

   // запрись
	var ch chan int
	ch <- 1 		// deadlock

	// чтение
	var ch chan int
	<-ch			// deadlock

	// закрытие
	var ch chan int
	close(ch)		// panic

2. Запись в закрытый канал - panic
	ch := make(chan int, 2)
	close(ch)
	ch <- 123

3. После закрытия канала, если в буфере остаются значения - их можно вычитать,
	и флаг открытости канала будет true.
	После вычитки буфера у закрытого канала,
	флаг открытости будет false, получаем zero value.

4. range по nil каналу - deadlock.
	Т.к. range - это синтаксический сахар, он использует чтение.

5. Когда в select прихоят одновременно несколько значений - кейс выбирается рандомно.

6. Канал --- это указатель на структуру. Можно сравнивать между собой.
	Базово - это сравнение указателей.
 

// ================================================

____________________________________________________
|					|						|						|
|					|	nil channel		|	closed channel |
|					|						|						|
|--------------------------------------------------|
|					|						|						|
| close(ch)		|		panic			|		panic			|
|					|						|						|
|--------------------------------------------------|
| 					|						|						|
| // read		|		deadlock		|	default value	|
| val := <-ch	|						|						|
|--------------------------------------------------|
|					|						|						|
| // write		|		deadlock		|		panic			|
| ch <- value	|						|						|
|______________|_________________|_________________|


// ===============================================

	Если не закрыть канал - то могут быть утечки.
Например если есть range - то он никогда не завершится.

// ===============================================

	Однонаправленные каналы.
	------------------------

chan<- T // только запись
<-chan T // только чтение

// ===============================================

В рамках одного селекта можно и читать и писать.
Например если канал небуферизированный.

select {
	case <-ch1:
	case ch2 <- "test"
	default:
}

// ===============================================

