Функция --- фрагмент кода, к которому можно обратиться
из другого места программы.

Параметры --- переменные в объявлении функции.
Аргументы --- значения передаваемые при вызове.

// number - parameter
func sqr(number int) int {
    return number * number
}

// 100 - argument
sqr(100)

Сигнатура функции --- список входных параметров функции 
и результирующих значений функции 
(название функции, тело функции, а также название входных параметров 
и названия результирующих значений не являются сигнатурой)

Все аргументы при передаче в фунецию --- копируется!

В Gо функции первого порядка --- они ведут себя как переменные,
их можно присваивать, передавать и возвращать,
но нельзя сравнивать и брать адрес у функции.

Нулевое значение типов функции равно nil.
Встроенные функции и функцию init нельзя использовать в качестве значений.

// ===============================================

Можно создать несколько функций с одинаковыми именами init или _

func _() {
}

func _() {
}

func init() {
}

func init() {
}

// ===============================================

Есть прототипные функции (объявление функции без тела функции)

func Double(number int) int

// ===============================================

Есть анонимные функции 

// 1 way
value := func(a, b int) int {
    return a + b
}

// 2 way
value := func(a, b int) int {
    return a + b
}(10, 20)

// ===============================================

    Variadic parameters.
    --------------------

func process(data string, numbers ...int) {
    // implementation
}

func main() {
    process("")
    process("", 1)
    process("", 1, 2, 3)
    process("", []int{1, 2}...)
}

// ===============================================

    Именованные параметры.
    ----------------------

Имена параметров в возвращаемых значениях можно пропускать.

func (x int, y int, z string) (int, int, bool) {
    var a int
    var b int
    var c bool
    // ...
    if err != nil {
        return a, b, c  // необходимо возвращать так как параметры не проименованы
    }
}

func (x int, y int, z string) (x int, y int, z bool) {
    // ...
    if err != nil {
        return  // можно не возвращать ничего (параметры проименованы) - значения бадут по умолчанию
    }
    return x, y, z
}

// ===============================================

Компилятор Go умеет встраивать функции inline.
Это компилятор берет код из функции и подставляет этот код в месте вызова функции.


func add(x, y int) int {
    return x + y
}

func main() {
    x := 5
    y := 7
    z := add(x, y)
    _ = z
}

Этот код выше компилятор сделает как:

func main() {
    x := 5
    y := 7
    z := x + y  // inlining
    _ = z
}

Чтоб не инлайнить функцию в анотации нодо указать //go:noinline

// ===============================================
