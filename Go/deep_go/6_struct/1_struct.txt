Структура данных --- програмная единица,
позволяющая хранить и обрабатывать однотипные 
и/или логически связанные данные.

Receiver --- указатель на текущий объект,
или объект структуры (аналог this в др. языках)

Получатель должен быть указателем:
    1. Если метод должен изменить получателя.
    2. Если в получателе есть поле, которое нельзя копировать,
        например тип из пакета sync.

Получатель следует сделать указателем:
    1. Если получатель большой объект, чтоб не копировать.


// ===========================================

    У структур могут быть тэги.

type User struct {
    Name    string `json:"name" xml:"name"`
    Surname string `json:"surname" xml:"surname"`
}

// ===========================================

    Выравнивание структур.
    ----------------------

B Go используется требуемое выравнивание.
Его значение равно размеру памяти, требуюшемуся
самому большому полю в структуре.

То есть, если в структуре есть только поля int32, то варавнивание составит 4 байта,
а если есть и int32 и int64 - то 8 байтов.

type data struct {
    a bool      // 1 byte
    b int32     // 4 bytes
    c bool      // 1 byte
}

Структура весит 6 байт, не при такой раскладке будет занимать 12 байт.
Выравнивание будет выглядить следующим образом.

x _ _ _     - 4 bytes
x x x x     - 4 bytes
x _ _ _     - 4 bytes


Но если поменять порядок полей:

type data struct {
    a int32     // 4 bytes
    b bool      // 1 byte
    c bool      // 1 byte
}

То выравнивание будет выглядить следующим образом:

x x x x     - 4 bytes
x x _ _     - 4 bytes

И будет 8 байт.

Компилятор не меняет порядок полей в структуре и не может оптимизировать такие случаи.
Поэтому мы должны.

При встраивании другой структуры, поля распаковываются до примитива, 
и по ним выравнивается.

// ===========================================

Размер пустой структуры равен нулю.
Но при этом можно взять адрес у пустой структуры.

Если создать много пустых структур,
то все они указывают на одно и то же место в памяти.

// ===========================================
