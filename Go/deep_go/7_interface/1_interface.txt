Интерфейс --- набор сигнатур методов,
которые нужно реализовать, чтобы удовлеторить контракту.
    * одному интерфейсу могут соответствовать много типов
    * тип может реализовывать несколько интерфейсов

Интерфейсы должны быть:
    * минималистичны - не должно быть огромного набора методов
    * независимость от реализации - не должен ничего знать о тех типах,
        которые его реализуют


NIL --- нулевое значение для интерфейсного типа.

B Go --- утинная типизация интерфейсов (неявное имплементирование)


// ======================================================

    Внутреннее устройство.
    ----------------------

В структуре интнрфейс есть 2 машинных слова.

data --- участок в памяти которая реализует данный интерфейс.
itab --- дискриптор который описывает динамический тип что стоит за интерфейсом,
            и там есть набор функций. Эта таблица будет уникальна для каждой пары 
            интерфейс-статический тип.

type iface struct {
    tab  *itab,
    data unsafe.Pointer
}

type itab struct {
    inter *interfacetype
    _type *_type
    hash  uint32
    _     [4]byte
    func  [1]uintptr
}


// representation empty interface
type eface struct {
    _type *_type
    data  unsafe.Pointer
}

// ======================================================

    Статические и динамические типы.
    --------------------------------

Статический тип - не будет изменен.
Динамический тип - меняется.

type Stringer interface {
	String() string
}

func main() {
	var s Stringer  // static type
	s = time.Time{} // dynamic type
	_ = s
}


// ======================================================

    Пустой интерфейс.
    -----------------

Это интерфейс, которому удовлетворяет абсолютно любой тип.

// representation empty interface
type eface struct {
    _type *_type
    data  unsafe.Pointer
}

any --- алиас пустого интерфейса.

type Nothing interface{}

func main() {
	var nothing Nothing
	var empty interface{}
	var any any

	nothing = empty
	nothing = any

	empty = nothing
	empty = any

	any = nothing
	any = empty
}

// ======================================================

    Сравнение пустых интерфейсов.
    -----------------------------

var x interface{} = 3
var y interface{} = 3
fmt.Println(x == y)   // true

// ======================================================

    Type assertion.
    ---------------

Это надо чтоб узнать что стоит за интерфейсом.

x.(T) проверяет, что x != nil и:
    1. если Т не интерфейс, то проверяет, что динамический тип х это Тип
    2. если Т интерфейс, то проверяет, что динамический тип х его реализует.

Base syntax:

converted, ok := interface.(int)
if !ok {
    fmt.Println("interface not int type")
}

// ======================================================
// ======================================================
// ======================================================
// ======================================================