
	S - Single Responsibility Principle
	O - Open-Close Principle 
	L - Liskov Substitution Principle
	I - Interface Segregation Principle
	D - Dependency Inversion Principle


================================================================
	
	1. Single Responsibility

	Каждый класс должен решать лишь одну задачу.
	Класс должен быть ответственен лишь за что-то одно.


================================================================

	2. Open-Close 

	Программные сущности (классы, модули, функции)
	должны быть открыты для расширения, и закрыты для модификации.

================================================================

	3. Liskov Substitution

	Необходимо, чтобы подклассы могли бы служить заменой для своих суперклассов.
	Цель этого принципа заключаются в том, чтобы классы-наследники
	могли бы использоваться вместо родительских классов,
	от которых они образованы, не нарушая работу программы.

	Необходимо вводить ограничение на наследование,
	чтоб потомки не противоречили базовому поведению

================================================================

	4. Interface Segregation

	Не надо заставлять наследовать интерфейс если это не требуется.

================================================================

	5. Dependency Inversion

	1. Модули верхних уровней не должны зависеть от модулей нижних уровней. 
	Оба типа модулей должны зависеть от абстракций.

	2. Абстракции не должны зависеть от деталей. 
	Детали должны зависеть от абстракций.

================================================================

