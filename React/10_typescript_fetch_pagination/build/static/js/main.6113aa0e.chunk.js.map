{"version":3,"sources":["types/user.ts","hooks/useTypedSelector.ts","types/todo.ts","store/action_creators/user.ts","store/action_creators/todo.ts","store/action_creators/index.ts","hooks/useActions.ts","components/UserList.tsx","components/TodoList.tsx","App.tsx","store/reducers/userReducer.ts","store/reducers/todoReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["UserActionTypes","useTypedSelector","useSelector","TodoActionTypes","fetchUsers","dispatch","a","type","FETCH_USERS","axios","get","response","setTimeout","FETCH_USERS_SUCCESS","payload","data","FETCH_USERS_ERROR","fetchTodos","page","limit","FETCH_TODOS","params","_page","_limit","FETCH_TODOS_SUCCESS","FETCH_TODOS_ERROR","setTodoPage","SET_TODO_PAGE","TodoActionCreators","UserActionCreators","useActions","useDispatch","bindActionCreators","ActionCreators","UserList","state","user","users","error","loading","useEffect","map","name","id","TodoList","todo","todos","title","style","display","p","onClick","border","padding","App","className","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6113aa0e.chunk.js","sourcesContent":["export interface UserState {\n    users: any[];\n    loading: boolean;\n    error: null | string;\n}\nexport enum UserActionTypes {\n    FETCH_USERS = 'FETCH_USERS',\n    FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS',\n    FETCH_USERS_ERROR = 'FETCH_USERS_FETCH_USERS_ERROR',\n}\ninterface FetchUsersAction {\n    type: UserActionTypes.FETCH_USERS;\n}\ninterface FetchUsersSuccessAction {\n    type: UserActionTypes.FETCH_USERS_SUCCESS;\n    payload: any[]\n}\ninterface FetchUsersErrorAction {\n    type: UserActionTypes.FETCH_USERS_ERROR;\n    payload: string;\n}\nexport type UserAction = FetchUsersAction | FetchUsersErrorAction | FetchUsersSuccessAction;","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootState } from '../store/reducers';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;","export interface TodoState {\n    todos: any[];\n    loading: boolean;\n    error: null | string;\n    page: number;\n    limit: number;\n}\n\nexport enum TodoActionTypes {\n    FETCH_TODOS= 'FETCH_TODOS',\n    FETCH_TODOS_SUCCESS= 'FETCH_TODOS_SUCCESS',\n    FETCH_TODOS_ERROR= 'FETCH_TODOS_ERROR',\n    SET_TODO_PAGE = 'SET_TODO_PAGE'\n}\ninterface FetchTodoAction {\n    type: TodoActionTypes.FETCH_TODOS;\n}\ninterface FetchTodoSuccessAction {\n    type: TodoActionTypes.FETCH_TODOS_SUCCESS;\n    payload: any[];\n}\ninterface FetchTodoErrorAction {\n    type: TodoActionTypes.FETCH_TODOS_ERROR;\n    payload: string;\n}\ninterface SetTodoPage {\n    type: TodoActionTypes.SET_TODO_PAGE;\n    payload: number;\n}\n\nexport type TodoAction =\n    FetchTodoAction\n    | FetchTodoErrorAction\n    | FetchTodoSuccessAction\n    | SetTodoPage;","import {UserAction, UserActionTypes} from \"../../types/user\";\nimport {Dispatch} from \"redux\";\nimport axios from \"axios\";\n\nexport const fetchUsers = () => {\n    return async (dispatch: Dispatch<UserAction>) => {\n        try {\n            dispatch({type: UserActionTypes.FETCH_USERS})\n            const response = await axios.get('https://jsonplaceholder.typicode.com/users')\n            setTimeout(() => {\n                dispatch({type: UserActionTypes.FETCH_USERS_SUCCESS, payload: response.data})\n            }, 1000)\n        } catch (e) {\n            dispatch({\n                type: UserActionTypes.FETCH_USERS_ERROR,\n                payload: 'Something went wrong'\n            })\n        }\n    }\n}\n","import {Dispatch} from \"redux\";\nimport axios from \"axios\";\nimport {TodoAction, TodoActionTypes} from \"../../types/todo\";\n\nexport const fetchTodos = (page = 1, limit = 10) => {\n    return async (dispatch: Dispatch<TodoAction>) => {\n        try {\n            dispatch({type: TodoActionTypes.FETCH_TODOS})\n            const response = await axios.get('https://jsonplaceholder.typicode.com/todos', {\n                params: {_page: page, _limit: limit}\n            })\n            setTimeout(() => {\n                dispatch({type: TodoActionTypes.FETCH_TODOS_SUCCESS, payload: response.data})\n            }, 500)\n        } catch (e) {\n            dispatch({\n                type: TodoActionTypes.FETCH_TODOS_ERROR,\n                payload: 'Something went wrong'\n            })\n        }\n    }\n}\nexport function setTodoPage(page: number): TodoAction {\n    return {type: TodoActionTypes.SET_TODO_PAGE, payload: page};\n}\n","import * as UserActionCreators from './user';\nimport * as TodoActionCreators from './todo';\n\nexport default {\n    ...TodoActionCreators,\n    ...UserActionCreators\n};","import {useDispatch} from \"react-redux\";\nimport {bindActionCreators} from \"redux\";\nimport ActionCreators from '../store/action_creators/';\n\nexport const useActions = () => {\n    const dispatch = useDispatch()\n    return bindActionCreators(ActionCreators, dispatch)\n}","import { useEffect } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\nimport { useTypedSelector } from '../hooks/useTypedSelector';\n// import { fetchUsers } from '../store/action_creators/user';\nimport { useActions } from '../hooks/useActions';\n\nconst UserList: React.FC = () => {\n\tconst { users, error, loading } = useTypedSelector(state => state.user);\n\tconst {fetchUsers} = useActions();\n\n\tuseEffect(() => {\n\t\tfetchUsers();\n\t}, []);\n\n\tif (loading) {\n\t\treturn <h1>Loading........</h1>;\n\t}\n\n\tif (error) {\n\t\treturn <h1>{ error }</h1>;\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t{ users.map(user => \n\t\t\t\t<div key={user.id}>{user.name}</div>\n\t\t\t) }\n\t\t</div>\n\t);\n};\n\nexport default UserList;","import {useEffect} from 'react';\nimport {useTypedSelector} from \"../hooks/useTypedSelector\";\nimport {useActions} from \"../hooks/useActions\";\n\nconst TodoList: React.FC = () => {\n    const {page, error, loading, todos, limit} = useTypedSelector(state => state.todo);\n    const {fetchTodos, setTodoPage} = useActions();\n    const pages = [1, 2, 3, 4, 5];\n\n    useEffect(() => {\n        fetchTodos(page, limit);\n    }, [page])\n\n    if (loading) {\n        return <h1>Идет загрузка...</h1>\n    }\n    if (error) {\n        return <h1>{error}</h1>\n    }\n\n    return (\n        <div>\n            {todos.map(todo =>\n                <div key={todo.id}>{todo.id} - {todo.title}</div>\n            )}\n            <div style={{display: \"flex\"}}>\n                {pages.map(p =>\n                    <div\n                        onClick={() => setTodoPage(p)}\n                        style={{border:p === page ? '2px solid green' : '1px solid gray', padding: 10}}\n                    >\n                        {p}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default TodoList;","import UserList from './components/UserList';\nimport TodoList from './components/TodoList';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      Hello World\n\n      <UserList />\n\n      <hr />\n\n      <TodoList />\n    </div>\n  );\n};\n\nexport default App;\n","import {UserAction, UserActionTypes, UserState} from \"../../types/user\";\n\nconst initialState: UserState = {\n    users: [],\n    loading: false,\n    error: null\n}\n\nexport const userReducer = (state = initialState, action: UserAction): UserState => {\n    switch (action.type) {\n        case UserActionTypes.FETCH_USERS:\n            return {loading: true, error: null, users: []};\n        case UserActionTypes.FETCH_USERS_SUCCESS:\n            return {loading: false, error: null, users: action.payload};\n        case UserActionTypes.FETCH_USERS_ERROR:\n            return {loading: false, error: action.payload, users: []};\n        default:\n            return state;\n    }\n}\n","import {TodoAction, TodoActionTypes, TodoState} from \"../../types/todo\";\n\nconst initialState: TodoState = {\n    todos: [],\n    page: 1,\n    error: null,\n    limit: 10,\n    loading: false\n}\n\nexport const todoReducer = (state = initialState, action: TodoAction): TodoState => {\n    switch (action.type) {\n        case TodoActionTypes.FETCH_TODOS:\n            return {...state, loading: true}\n        case TodoActionTypes.FETCH_TODOS_SUCCESS:\n            return {...state, loading: false, todos: action.payload}\n        case TodoActionTypes.FETCH_TODOS_ERROR:\n            return {...state, loading: false, error: action.payload}\n        case TodoActionTypes.SET_TODO_PAGE:\n            return {...state, page: action.payload}\n        default:\n            return state\n    }\n}\n","import { combineReducers } from 'redux';\nimport { userReducer } from './userReducer';\nimport { todoReducer } from './todoReducer';\n\nexport const rootReducer = combineReducers({\n\tuser: userReducer,\n\ttodo: todoReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './reducers';\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}