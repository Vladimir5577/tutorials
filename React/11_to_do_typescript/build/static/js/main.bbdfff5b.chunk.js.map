{"version":3,"sources":["Components/Navbar.tsx","Components/TodoForm.tsx","Components/TodoList.tsx","App.tsx","index.tsx"],"names":["Navbar","className","href","TodoForm","props","ref","useRef","type","id","placeholder","onKeyPress","event","key","onAdd","current","value","htmlFor","TodoList","todos","onRemove","onToggle","length","map","todo","classes","completed","push","join","checked","onChange","bind","title","onClick","preventDefault","removeHandler","App","useState","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","newTodo","Date","now","prev","item","confirm","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAceA,EAdU,WACxB,OACC,8BACI,sBAAKC,UAAU,kCAAf,UACE,mBAAGC,KAAK,IAAID,UAAU,aAAtB,gCACA,qBAAIA,UAAU,6BAAd,UACE,6BAAI,mBAAGC,KAAK,IAAR,0BACJ,6BAAI,mBAAGA,KAAK,KAAR,6BCoCCC,EArC2B,SAACC,GAQ1C,IAAMC,EAAMC,iBAAyB,MAWrC,OACC,sBAAKL,UAAU,kBAAf,UACC,uBACCM,KAAK,OACLC,GAAG,QACHC,YAAY,YAGZJ,IAAKA,EACLK,WAlBqB,SAACC,GACN,UAAdA,EAAMC,MACTR,EAAMS,MAAMR,EAAIS,QAASC,OACzBV,EAAIS,QAASC,MAAQ,OAiBrB,uBAAOC,QAAQ,QAAQf,UAAU,SAAjC,2CCaYgB,EAzC2B,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAE7D,GAAqB,IAAjBF,EAAMG,OACT,OAAO,kDAQR,OACC,6BACGH,EAAMI,KAAI,SAAAC,GACX,IAAMC,EAAU,CAAC,QAIjB,OAHID,EAAKE,WACRD,EAAQE,KAAK,aAGb,oBAAIzB,UAAWuB,EAAQG,KAAK,KAA5B,SACC,kCACC,uBACCpB,KAAK,WACLqB,QAASL,EAAKE,UACdI,SAAUT,EAASU,KAAK,KAAMP,EAAKf,MAEpC,+BAAOe,EAAKQ,QACZ,mBACC9B,UAAU,yBACV+B,QAAS,SAAArB,GAAK,OAvBC,SAACA,EAAyBH,GAC/CG,EAAMsB,iBACNd,EAASX,GAqBe0B,CAAcvB,EAAOY,EAAKf,KAF7C,wBARqCe,EAAKf,UC8ClC2B,EAhEO,WAAO,IAAD,EAEAC,mBAAkB,IAFlB,mBAEnBlB,EAFmB,KAEZmB,EAFY,KAI1BC,qBAAU,WACR,IAAMC,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,MAC1DN,EAASE,KACR,IAEHD,qBAAU,WACRI,aAAaE,QAAQ,QAASJ,KAAKK,UAAU3B,MAC5C,CAACA,IAsCJ,OACE,qCACE,cAAC,EAAD,IACA,sBAAKjB,UAAU,YAAf,UACE,cAAC,EAAD,CAAUY,MAxCG,SAACkB,GAClB,IAAMe,EAAiB,CACrBf,MAAOA,EACPvB,GAAIuC,KAAKC,MACTvB,WAAW,GAGbY,GAAS,SAAAY,GAAI,OAAKH,GAAL,mBAAiBG,UAkC1B,cAAC,EAAD,CACE/B,MAAOA,EACPE,SAjCc,SAACZ,GACrB,IAAMsC,EAAU,YAAI5B,GAAOI,KAAI,SAAA4B,GAI7B,OAHGA,EAAK1C,KAAOA,IACb0C,EAAKzB,WAAayB,EAAKzB,WAElByB,KAETb,EAASS,IA2BH3B,SAfc,SAACX,GACA2C,QAAQ,iCAE3Bd,GAAS,SAAAY,GAAI,OAAIA,EAAKG,QAAO,SAAA7B,GAAI,OAAIA,EAAKf,KAAOA,kBCjDvD6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bbdfff5b.chunk.js","sourcesContent":["const Navbar: React.FC = () => {\n\treturn (\n\t\t<nav>\n\t\t    <div className=\"nav-wrapper purple darken-2 px1\">\n\t\t      <a href=\"/\" className=\"brand-logo\">React + Typescript</a>\n\t\t      <ul className=\"right hide-on-med-and-down\">\n\t\t        <li><a href=\"/\">To Do List</a></li>\n\t\t        <li><a href=\"/a\">Info</a></li>\n\t\t      </ul>\n\t\t    </div>\n\t\t</nav>\n\t);\n};\n\nexport default Navbar;","import { useRef } from 'react';\n\ninterface TodoFormProps {\n\tonAdd(title: string): void\n}\n\nconst TodoForm: React.FC<TodoFormProps> = (props) => {\n\n\t// const [title, setTitle] = useState<string>('');\n\n\t// const changeHandler = (evaent: React.ChangeEvent<HTMLInputElement>) => {\n\t// \tsetTitle(event.target.value);\n\t// };\n\n\tconst ref = useRef<HTMLInputElement>(null);\n \n\tconst keyPressHandler = (event: React.KeyboardEvent) => {\n\t\tif (event.key === 'Enter') {\n\t\t\tprops.onAdd(ref.current!.value);\n\t\t\tref.current!.value = '';\n\t\t\t// console.log(title);\n\t\t\t// setTitle('');\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"input-field mt2\">\n\t\t\t<input \n\t\t\t\ttype=\"text\" \n\t\t\t\tid=\"title\" \n\t\t\t\tplaceholder=\"Add to do\" \n\t\t\t\t// value={title}\n\t\t\t\t// onChange={changeHandler}\n\t\t\t\tref={ref}\n\t\t\t\tonKeyPress={keyPressHandler}\n\t\t\t/>\n\t\t\t<label htmlFor=\"title\" className=\"active\">\n\t\t\t\tAdd to do and press Enter\n\t\t\t</label>\n\t\t</div>\n\t);\n};\n\nexport default TodoForm;\n","import { ITodo } from './Interfaces';\n\ntype TodoListProps = {\n\ttodos: ITodo[];\n\tonToggle(id: number): void;\n\tonRemove: (id: number) => void;\n};\n\nconst TodoList: React.FC<TodoListProps> = ({ todos, onRemove, onToggle }) => {\n\n\tif (todos.length === 0) {\n\t\treturn <p>There are no todo</p>\n\t}\n\n\tconst removeHandler = (event: React.MouseEvent, id: number) => {\n\t\tevent.preventDefault();\n\t\tonRemove(id);\n\t};\n\n\treturn (\n\t\t<ul>\n\t\t\t{ todos.map(todo => {\n\t\t\t\tconst classes = ['todo'];\n\t\t\t\tif (todo.completed) {\n\t\t\t\t\tclasses.push('completed');\n\t\t\t\t}\n\t\t\t\treturn (\n\t\t\t\t\t<li className={classes.join(' ')} key={todo.id}>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t<input \n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tchecked={todo.completed} \n\t\t\t\t\t\t\t\tonChange={onToggle.bind(null, todo.id)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<span>{todo.title}</span>\n\t\t\t\t\t\t\t<i \n\t\t\t\t\t\t\t\tclassName=\"material-icon red-text\" \n\t\t\t\t\t\t\t\tonClick={event => removeHandler(event, todo.id)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t\t</i>\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</li>\n\t\t\t\t);\n\t\t\t})}\n\t\t</ul>\n\t);\n};\n\nexport default TodoList;","import { useState, useEffect } from 'react';\n\nimport Navbar from './Components/Navbar';\nimport TodoForm from './Components/TodoForm';\nimport TodoList from './Components/TodoList';\nimport { ITodo } from './Components/Interfaces';\n\ndeclare var confirm: (question: string) => boolean;\n\nconst App: React.FC = () => {\n\n  const [todos, setTodos] = useState<ITodo[]>([]);\n\n  useEffect(() => {\n    const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[];\n    setTodos(saved);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const addHandler = (title: string) => {\n    const newTodo: ITodo = {\n      title: title,\n      id: Date.now(),\n      completed: false\n    };\n    // setTodos([newTodo, ...todos]);\n    setTodos(prev => [newTodo, ...prev]);\n  };\n\n  const toggleHandler = (id: number) => {\n    const newTodo = [...todos].map(item => {\n      if(item.id === id) {\n        item.completed = !item.completed;\n      }\n      return item;\n    });\n    setTodos(newTodo);\n    /*\n    setTodos(prev => prev.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n    console.log(id, todo.completed);\n      return todo;\n    }));\n    */\n  };\n  \n  const removeHandler = (id: number) => {\n    const shouldRemove = confirm('Do you want to remove item ?');\n    if (shouldRemove) {\n      setTodos(prev => prev.filter(todo => todo.id !== id));\n    }\n  };\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"container\">\n        <TodoForm onAdd={addHandler} />\n        <TodoList \n          todos={todos} \n          onToggle={toggleHandler}\n          onRemove={removeHandler}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}